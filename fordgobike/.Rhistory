bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month")
text(x = bar, y = month_counts,   # Add labels
label = month_counts, pos = 3, cex = 0.8, col = "red")
df$start_month
df = df %>%
mutate(start_month = sub(" .*", "", start_time)) %>%
mutate(start_month = as.POSIXct(start_month)) %>%
mutate(start_month = format(start_month, "%B"))
df = bind_rows(df_list)
df = df %>%
mutate(start_month = sub(" .*", "", start_time)) %>%
mutate(start_month = as.POSIXct(start_month)) %>%
mutate(start_month = format(start_month, "%B"))
class(df$start_month)
unique(df$start_month)
library(stringr)
df = df %>%
mutate(start_hour = sub("^.{11}", "", start_time)) %>%
mutate(start_hour = str_extract(start_hour, "^[0-9]{2}"))
df = df %>%
mutate(member_age = 2018 - member_birth_year)
df = df %>%
mutate(duration_min = duration_sec / 60)
character_vars = which(sapply(df, is.character))
df[character_vars] = lapply(df[character_vars], as.factor)
df = select(df, -c(start_time, end_time, start_station_id, end_station_id, bike_id, member_birth_year, duration_sec))
glimpse(df)
df$start_month = factor(df$start_month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August"))
# Organize month
df$start_month = factor(df$start_month,
levels = c("January", "February", "March", "April", "May", "June", "July", "August"))
# Count usage by month
month_counts = table(df$start_month)
# Plot barplot
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month")
text(x = bar, y = month_counts,   # Add labels
label = month_counts, pos = 3, cex = 0.8, col = "red")
# Plot barplot
library(ggplot2)
ggplot(df, aes(start_month)) +
geom_bar() +
facet_grid(. ~ user_type) +
xlab("Months in 2018") +
ylab("Number of Rides") +
ggtitle("Comparison of Usage Between Customers and Subscribers") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))   # Rotate x-axis labels
# Organize data by gender
df_gender = df %>%
filter(member_gender %in% c("Male", "Female")) %>%   # Isolate "Male" and "Female" genders
mutate(member_gender = droplevels(member_gender))   # Drop unused levels
# Plot barplot
ggplot(df_gender, aes(start_month, fill = member_gender)) +
geom_bar(position = "fill") +
xlab("Months in 2018") +
ylab("Proportion of Rides") +
ggtitle("Bike Usage by Gender over Time") +
guides(fill = guide_legend(title = "Gender")) +
theme_minimal()
# Plot histogram
ggplot(df, aes(member_age)) +
geom_histogram(binwidth = 2, alpha = 0.5) +
scale_x_continuous(limits = c(10, 100),
breaks = seq(10, 100, by = 4)) +
xlab("Age in Years") +
ylab("Number of Rides") +
ggtitle("Total Rides by Age") +
theme_minimal()
# Plot histogram
ggplot(df, aes(duration_min)) +
geom_histogram(binwidth = 2, alpha = 0.5) +
scale_x_continuous(limits = c(0, 100),
breaks = seq(0, 100, by = 2)) +
xlab("Ride Duration in Minutes") +
ylab("Number of Rides") +
ggtitle("Duration of Rides") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))   # Rotate x-axis labels
quantile(df$duration_min, .99)
quantile(df$duration_min, .90)
ggplot(df, aes(duration_min)) +
geom_histogram(binwidth = 2, alpha = 0.5) +
scale_x_continuous(limits = c(0, 100),
breaks = seq(0, 100, by = 2)) +
facet_grid(. ~ user_type) +
xlab("Ride Duration in Minutes") +
ylab("Number of Rides") +
ggtitle("Duration of Rides") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))   # Rotate x-axis labels
ggplot(df, aes(duration_min)) +
geom_histogram(binwidth = 2, alpha = 0.5) +
scale_x_continuous(limits = c(0, 100),
breaks = seq(0, 100, by = 2)) +
xlab("Ride Duration in Minutes") +
ylab("Number of Rides") +
ggtitle("Duration of Rides") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90))   # Rotate x-axis labels
quantile(df$duration_min, .50)
quantile(df$duration_min, .25)
quantile(df$duration_min, .91)
quantile(df$duration_min, .94)
quantile(df$duration_min, .95)
quantile(df$duration_min, .98)
quantile(df$duration_min, .96)
quantile(df$duration_min, .97)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
las = 2)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
las = 1.5)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
las = 3)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
las = 2)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex = 0.5,
las = 2)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.axis = 0.8,
las = 2)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.axis = 0.1,
las = 2)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.axis = 0.1)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.names = 0.5)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.names = 0.8)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.names = 1)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.names = 0.95)
bar = barplot(month_counts,
ylim = c(0, 220000),
xlab = "Months in 2018",
ylab = "Number of Rides",
main = "GoBike Usage by Month",
cex.names = 0.95,
cex.axis = 0.95)
install.packages("ggmap")
get_map("San Francisco") %>% ggmap()
library(ggmap)
get_map("San Francisco") %>% ggmap()
SFmap = get_map("San Francisco",
maptype = "hybrid")
SFmap = get_map("San Francisco",
maptype = "hybrid")
ggmap(SFmap)
SFmap = get_map("San Francisco",
maptype = "terrain-background")
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain-background")
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain")
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain")
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "roadmap")
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain")
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "osm")
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "stamen")
library(ggmap)
SFmap = get_map("San Francisco",
#maptype = "terrain",
source = "stamen")
library(ggmap)
SFmap = get_map("San Francisco",
#maptype = "terrain",
source = "google")
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 15)
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 12)
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 13)
ggmap(SFmap)
library(ggmap)
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 13)
ggmap(SFmap) +
geom_point(df, mapping = aes(x = start_station_longitude, y = start_station_latitude), color = "red")
library(ggmap)   # for retreiving Google Maps
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 13.5)
library(ggmap)   # for retreiving Google Maps
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
ggmap(SFmap) +
geom_point(df, aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
ggmap(SFmap) +
geom_point(df, aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
# Plot map and label stations
ggmap(SFmap) +
geom_point(df, aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
ggmap(SFmap)
+
geom_point(df, aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
# Plot map and label stations
ggmap(SFmap) +
geom_point(df, aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
class(df$start_station_latitude)
class(df$start_station_longitude)
rm(SFmap)
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
# Plot map and label stations
ggmap(SFmap) +
geom_point(df, aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
df$start_station_latitude
df$start_station_longitude
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
View(select(df, start_station_longitude, start_station_latitude))
unique(df$start_station_latitude)
View(unique(select(df, start_station_longitude, start_station_latitude)))
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
dummy = unique(select(df, start_station_longitude, start_station_latitude))
# Plot map and label stations
ggmap(SFmap) +
geom_point(dummy, aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 14)
dummy = unique(select(df, start_station_longitude, start_station_latitude))
# Plot map and label stations
ggmap(SFmap) +
geom_point(dummy, mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 13)
ggmap(SFmap) +
geom_point(data = dummy,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 13)
dummy = unique(select(df, start_station_longitude, start_station_latitude))
# Plot map and label stations
ggmap(SFmap) +
geom_point(data = dummy,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 12)
dummy = unique(select(df, start_station_longitude, start_station_latitude))
# Plot map and label stations
ggmap(SFmap) +
geom_point(data = dummy,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 12)
# Simplify plot data
#plot_df = unique(select(df, start_station_longitude, start_station_latitude))
# Plot map and label stations
ggmap(SFmap) +
geom_point(data = df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 12)
# Simplify plot data
stations_df = unique(select(df, start_station_longitude, start_station_latitude))
# Plot map and label stations
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 13)
# Simplify plot data
stations_df = unique(select(df, start_station_longitude, start_station_latitude))
# Plot map and label stations
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red") +
scale_y_continuous(limits = c(-122.46, -122.375))
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red") +
scale_x_continuous(limits = c(-122.46, -122.375))
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red") +
scale_x_continuous(limits = c(-122.45, -122.375))
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red") +
scale_x_continuous(limits = c(-122.45, -122.375)) +   # trim x-axis range
scale_y_continuous(limits = c(37.735, 37.81))   # trim y-axis range
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red")
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red") +
scale_x_continuous(limits = c(-122.45, -122.375)) +   # trim x-axis range
scale_y_continuous(limits = c(37.735, 37.81))   # trim y-axis range
stations_df = df %>%
group_by(start_hour, start_station_longitude, start_station_latitude) %>%
summarise(rides = n(start_station_id))
stations_df = df %>%
group_by(start_hour, start_station_longitude, start_station_latitude) %>%
summarise(rides = n)
library(dplyr)
stations_df = df %>%
group_by(start_hour, start_station_longitude, start_station_latitude) %>%
summarise(rides = n)
stations_df = df %>%
group_by(start_hour, start_station_longitude, start_station_latitude) %>%
summarise(rides = dplyr::n())
View(stations_df)
24392*
24392*d
24*392
max(stations_df$rides)
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map(location = c(),
maptype = "terrain",
source = "google",
zoom = 13)
library(ggmap)   # for retreiving Google Maps
# Obtain map of San Francisco
SFmap = get_map("San Francisco",
maptype = "terrain",
source = "google",
zoom = 13)
# Summarize data to report number of rides while grouping by starting time and location
stations_df = df %>%
group_by(start_hour, start_station_longitude, start_station_latitude) %>%
summarise(rides = dplyr::n())
# Plot map and label stations
ggmap(SFmap) +
geom_point(data = stations_df,
mapping = aes(x = start_station_longitude, y = start_station_latitude),
color = "red") +
scale_x_continuous(limits = c(-122.45, -122.375)) +   # trim x-axis range
scale_y_continuous(limits = c(37.735, 37.81))   # trim y-axis range
hi
1+1
